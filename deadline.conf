input {
  file {
    type => "deadline"
    path => "/home/deadline/*.csv"
    start_position => "beginning"
    sincedb_path => "/home/deadline/deadline.syncdb"
  }
	#stdin {
	#	type => "deadline"
	#}
}

filter {
	if [type] == "deadline" {
	csv {
		separator => ","
		columns => ["JobName","JobID","UserName","Comment","Department","SubmitMachine","SubmitDateTime","StartDateTime","FinishDateTime","Pool","Group","Priority","FrameList","FrameCount","TaskCount","Plugin","ExtraInfo0","ExtraInfo1","ExtraInfo2","ExtraInfo3","ExtraInfo4","ExtraInfo5","ExtraInfo6","ExtraInfo7","ExtraInfo8","ExtraInfo9","AuxiliaryFiles","AuxiliaryFileSize(Bytes)","MachineLimit","ErrorCount","AverageConcurrentTasks","ClockRenderTime","TotalTaskTime","AverageTaskTime","MedianTaskTime","TotalTaskStartupTime","AverageTaskStartupTime","MedianTaskStartupTime","TotalTaskRenderTime","AverageTaskRenderTime","MedianTaskRenderTime","TotalNormalizedTaskRenderTime","AverageNormalizedTaskRenderTime","MedianNormalizedTaskRenderTime","AverageFrameTime","AverageFrameStartupTime","AverageFrameRenderTime","AverageNormalizedFrameRenderTime","MedianFrameTime","MedianFrameStartupTime","MedianFrameRenderTime","MedianNormalizedFrameRenderTime","WastedErrorTime","WastedRequeueTime","TotalOutputFileSize(Bytes)","AverageOutputFileSize(Bytes)","MedianOutputFileSize(Bytes)","PeakRAMUsageBytes","AverageRAMUsageBytes","MedianRAMUsageBytes","PeakCPUUsage","AverageCPUUsage","MedianCPUUsage","UsedCPUClocks","TotalCPUClocks","PeakSwapUsageBytes","AverageSwapUsageBytes","MedianSwapUsageBytes"]
     convert => {
            "MedianOutputFileSize(Bytes)" => "float"
            "AverageRAMUsageBytes" => "float"
            "PeakSwapUsageBytes" => "float"
            "MedianSwapUsageBytes" => "float"
            "AverageOutputFileSize(Bytes)" => "float"
            "AuxiliaryFileSize(Bytes)" => "float"
            "AverageSwapUsageBytes" => "float"
            "TotalOutputFileSize(Bytes)" => "float"
            "PeakRAMUsageBytes" => "float"
            "MedianRAMUsageBytes" => "float"
            "Priority" => "integer"
            "MachineLimit" => "integer"
            "AuxiliaryFiles" => "integer"
            "TotalCPUClocks" => "integer"
            "TaskCount" => "integer"
            "ErrorCount" => "integer"
            "FrameCount" => "integer"
            "AverageConcurrentTasks" => "integer"
            "UsedCPUClocks" => "integer"
            "SubmitDateTime" => "date_time"
            "StartDateTime" => "date_time"
            "FinishDateTime" => "date_time"
     }
	}
	date {
		locale => "en-US"
		match => [ "SubmitDateTime", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd  HH:mm:ss", "dd/MM/yyyy  HH:mm", "dd/MM/yyyy HH:mm:ss", "ISO8601" ]
		timezone => "America/Sao_Paulo"
	}
	mutate {
 
    gsub => [
             "PeakCPUUsage", " %", "",
             "MedianCPUUsage", " %", "",
             "AverageCPUUsage", " %", ""
    ] 
    convert => { 
          "PeakCPUUsage" => "integer"
          "MedianCPUUsage" => "integer"
          "AverageCPUUsage" => "integer"         
		}
		update => { 
			     "host" => "%{[SubmitMachine]}"
		} 
  }
  grok {
  
    break_on_match => false
    match => {
        "TotalNormalizedTaskRenderTime" => "%{INT:ntdays}:%{INT:nthours}:%{INT:ntminutes}:%{INT:ntseconds}"
        "ClockRenderTime" => "%{INT:crdays}:%{INT:crhours}:%{INT:crminutes}:%{INT:crseconds}"
        "TotalTaskRenderTime" => "%{INT:trdays}:%{INT:trhours}:%{INT:trminutes}:%{INT:trseconds}" 
        "TotalTaskTime" => "%{INT:ttdays}:%{INT:tthours}:%{INT:ttminutes}:%{INT:ttseconds}"
        "TotalTaskStartupTime" => "%{INT:ttsdays}:%{INT:ttshours}:%{INT:ttsminutes}:%{INT:ttsseconds}"
        "WastedErrorTime" => "%{INT:wetdays}:%{INT:wethours}:%{INT:wetminutes}:%{INT:wetseconds}"
        "WastedRequeueTime" => "%{INT:wrtdays}:%{INT:wrthours}:%{INT:wrtminutes}:%{INT:wrtseconds}"
        "AverageFrameTime" => "%{INT:aftdays}:%{INT:afthours}:%{INT:aftminutes}:%{INT:aftseconds}"
    }
   }
   ruby { 
   
    code => "event.set('ElapsedTotalTaskStartupTime', 86400 * event.get('ttsdays').to_f + 3600 * event.get('ttshours').to_f + 60 * event.get('ttsminutes').to_f + event.get('ttsseconds').to_f)"   
   
   }   
   ruby { 
   
    code => "event.set('ElapsedWastedErrorTime', 86400 * event.get('wetdays').to_f + 3600 * event.get('wethours').to_f + 60 * event.get('wetminutes').to_f + event.get('wetseconds').to_f)"   
   
   }
   ruby { 
   
    code => "event.set('ElapsedWastedRequeueTime', 86400 * event.get('wrtdays').to_f + 3600 * event.get('wrthours').to_f + 60 * event.get('wrtminutes').to_f + event.get('wrtseconds').to_f)"   
   
   } 
   ruby { 
   
    code => "event.set('AverageFrameTime', 86400 * event.get('aftdays').to_f + 3600 * event.get('afthours').to_f + 60 * event.get('aftminutes').to_f + event.get('aftseconds').to_f)"   
   
   } 
   ruby { 
   
    code => "event.set('ElapsedTotalNormalizedTaskRenderTime', 86400 * event.get('ntdays').to_f + 3600 * event.get('nthours').to_f + 60 * event.get('ntminutes').to_f + event.get('ntseconds').to_f)"   
   
   }     
   ruby {
   
    code => "event.set('ElapsedClockRenderTime', 86400 * event.get('crdays').to_f + 3600 * event.get('crhours').to_f + 60 * event.get('crminutes').to_f + event.get('crseconds').to_f)" 
   
   }
   ruby { 
    
    code => "event.set('ElapsedTotalTaskRenderTime', 86400 * event.get('trdays').to_f + 3600 * event.get('trhours').to_f + 60 * event.get('trminutes').to_f + event.get('trseconds').to_f)" 
   
   }
   ruby { 
    
    code => "event.set('ElapsedTotalTaskTime', 86400 * event.get('ttdays').to_f + 3600 * event.get('tthours').to_f + 60 * event.get('ttminutes').to_f + event.get('ttseconds').to_f)"
    
    remove_field => ["ntdays","nthours","ntminutes","ntseconds","crdays","crhours","crminutes","crseconds","trdays","trhours","trminutes","trseconds","ttdays","tthours","ttminutes","ttseconds","ttsdays","ttshours","ttsminutes","ttsseconds","wetdays","wethours","wetminutes","wetseconds","wrtdays","wrthours","wrtminutes","wrtseconds","aftdays","afthours","aftminutes","aftseconds"] 
   }
 
 if "_dateparsefailure" in [tags] { drop {} }
 if "_grokparsefailure" in [tags] { drop {} }
 }
}

output {
	if [type] == "deadline" {
  elasticsearch {
    document_id => "%{[JobID]}"
    hosts => "http://localhost:9200"
    index => "%{[type]}-%{+YYYY.MM.dd}"
    template_name => "aws_billing"
  }
	stdout { codec => rubydebug }
	}
}
