input {
  file {
    type => "deadlinelicense"
    path => "/home/deadline-license/*.csv"
    start_position => "beginning"
    sincedb_path => "/home/deadline-license/deadlinelicense.syncdb"
  }
	#stdin {
	#	type => "deadlinelicense"
	#}
}

filter {
	if [type] == "deadlinelicense" {

	checksum {
		algorithm => "sha1"
		keys => ["message", "type"]
	}

	csv {
		separator => ","
		columns => ["TimeStamp","SlaveName","Region","RunningTime","RenderingTimeUBL","RenderingTimeNon-UBL","RenderingTimeTotal","IdleTime","TaskErrors","CompletedTasks","AverageMemoryUsageBytessecond","AverageCPUUsage","AverageNetworkSentBytessecond","AverageNetworkReceivedBytessecond","AverageSwapUsageBytessecond","AverageDiskReadBytessecond","AverageDiskWriteBytessecond"]
		
		convert => {				
			
			"TaskErrors" => "integer"
			"CompletedTasks" => "integer"
			"AverageMemoryUsageBytessecond" => "float"
			"AverageCPUUsage" => "integer"
			"AverageNetworkSentBytessecond" => "float"
			"AverageNetworkReceivedBytessecond" => "float"
			"AverageSwapUsageBytessecond" => "float"
			"AverageDiskReadBytessecond" => "float"
			"AverageDiskWriteBytessecond" => "float"        
     }
	}

	date {
		locale => "en-US"
		match => [ "TimeStamp", "yyyy-MM-dd HH:mm:ss", "yyyy/MM/dd  HH:mm:ss", "dd/MM/yyyy  HH:mm", "dd/MM/yyyy HH:mm:ss", "ISO8601" ]
		timezone => "America/Sao_Paulo"
	}

	mutate {
  	update => { 
	   	"host" => "%{[SlaveName]}"
  	}   
  }
  grok {
  
    break_on_match => false
    match => {
        "RunningTime" => "%{INT:rtdays}d%{SPACE}%{INT:rthours}h%{SPACE}%{INT:rtminutes}m%{SPACE}%{INT:rtseconds}s"
        "RenderingTimeUBL" => "%{INT:rtudays}d%{SPACE}%{INT:rtuhours}h%{SPACE}%{INT:rtuminutes}m%{SPACE}%{INT:rtuseconds}s"
        "RenderingTimeNon-UBL" => "%{INT:rtnudays}d%{SPACE}%{INT:rtnuhours}h%{SPACE}%{INT:rtnuminutes}m%{SPACE}%{INT:rtnuseconds}s" 
        "RenderingTimeTotal" => "%{INT:rttdays}d%{SPACE}%{INT:rtthours}h%{SPACE}%{INT:rttminutes}m%{SPACE}%{INT:rttseconds}s"
        "IdleTime" => "%{INT:itdays}d%{SPACE}%{INT:ithours}h%{SPACE}%{INT:itminutes}m%{SPACE}%{INT:itseconds}s"
    }
   }
   ruby { 
   
    code => "event.set('ElapsedRunningTime', 86400 * event.get('rtdays').to_f + 3600 * event.get('rthours').to_f + 60 * event.get('rtminutes').to_f + event.get('rtseconds').to_f)"   
   
   }     
   ruby {
   
    code => "event.set('ElapsedRenderingTimeUBL', 86400 * event.get('rtudays').to_f + 3600 * event.get('rtuhours').to_f + 60 * event.get('rtuminutes').to_f + event.get('rtuseconds').to_f)" 
   
   }
   ruby { 
    
    code => "event.set('ElapsedRenderingTimeNonUBL', 86400 * event.get('rtnudays').to_f + 3600 * event.get('rtnuhours').to_f + 60 * event.get('rtnuminutes').to_f + event.get('rtnuseconds').to_f)" 
      
   }
   ruby { 
    
    code => "event.set('ElapsedRenderingTimeTotal', 86400 * event.get('rttdays').to_f + 3600 * event.get('rtthours').to_f + 60 * event.get('rttminutes').to_f + event.get('rttseconds').to_f)" 
      
   }
   ruby { 
    
    code => "event.set('ElapsedIdleTime', 86400 * event.get('itdays').to_f + 3600 * event.get('ithours').to_f + 60 * event.get('itminutes').to_f + event.get('itseconds').to_f)"
    
    remove_field => ["rtdays","rthours","rtminutes","rtseconds","rtudays","rtuhours","rtuminutes","rtuseconds","rtnudays","rtnuhours","rtnuminutes","rtnuseconds","rttdays","rtthours","rttminutes","rttseconds","itdays","ithours","itminutes","itseconds"] 
   }
 
 if "_dateparsefailure" in [tags] { drop {} }
 if "_grokparsefailure" in [tags] { drop {} }
 }
}

output {
	if [type] == "deadlinelicense" {
		elasticsearch {
			document_id => "%{logstash_checksum}"
			hosts => "http://localhost:9200"
			index => "%{[type]}-%{+YYYY.MM.dd}"
			template_name => "aws_billing"
  	}
	stdout { codec => rubydebug }
 }
}
